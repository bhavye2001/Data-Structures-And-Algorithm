#User function Template for python3
from collections import deque
class Solution:
    def findOrder(self,dict, N, K):
    # code here
        graph={}
        indegree={}
        
        for i in dict:
            for j in i:
                indegree[j]=0
                graph[j]=[]
                
        
        for i in range(len(dict)-1):
            w1=dict[i]
            w2=dict[i+1]
            if(len(w2)<len(w1) and w1.startswith(w2)):
                return ""
            for j in range(min(len(w1),len(w2))):
                parent=w1[j]
                child=w2[j]
                if(parent!=child):
                    graph[parent].append(child)
                    indegree[child]+=1
                    break
        sources=deque()
        for i,j in indegree.items():
            if(j==0):
                sources.append(i)
        s=''
        while sources:
            c=sources.popleft()
            s+=c
            for nbr in graph[c]:
                indegree[nbr]-=1
                if(indegree[nbr]==0):
                    sources.append(nbr)
        return s

#{ 
#  Driver Code Starts
#Initial Template for Python 3

class sort_by_order:
    def __init__(self,s):
        self.priority = {}
        for i in range(len(s)):
            self.priority[s[i]] = i
    
    def transform(self,word):
        new_word = ''
        for c in word:
            new_word += chr( ord('a') + self.priority[c] )
        return new_word
    
    def sort_this_list(self,lst):
        lst.sort(key = self.transform)

if __name__ == '__main__':
    t=int(input())
    for _ in range(t):
        line=input().strip().split()
        n=int(line[0])
        k=int(line[1])
        
        alien_dict = [x for x in input().strip().split()]
        duplicate_dict = alien_dict.copy()
        ob=Solution()
        order = ob.findOrder(alien_dict,n,k)
        s = ""
        for i in range(k):
            s += chr(97+i)
        l = list(order)
        l.sort()
        l = "".join(l)
        if s != l:
            print(0)
        else:
            x = sort_by_order(order)
            x.sort_this_list(duplicate_dict)
            
            if duplicate_dict == alien_dict:
                print(1)
            else:
                print(0)


# } Driver Code Ends
